# 🌐 Real-Time Chatbox 🚀

یک چت روم پیشرفته با امکان چت خصوصی و گروهی، آپلود فایل و رابط کاربری زیبا

## ✨ Features

✅ چت در زمان واقعی با Socket.IO  
✅ قابلیت ایجاد و مدیریت گروه‌ها  
✅ امکان آپلود فایل (تصویر، ویدیو، PDF)  
✅ رابط کاربری ریسپانسیو  
✅ پشتیبانی از حالت تاریک/روشن  
✅ نمایش کاربران آنلاین  
✅ پشتیبانی کامل از زبان فارسی  
✅ رمزنگاری پیام‌ها
✅ پشتیبانی از حالت آفلاین

## 🔧 Recent Fixes

- Fixed Persian text concatenation issue in group join notifications
- Fixed getFileIcon function that was missing return statement
- Removed duplicate function and variable declarations
- Standardized template literals and string formatting throughout the codebase
- Improved code organization and readability

## ⚡ Quick Setup (Run Locally)

### 1️⃣ Clone the Repository
```bash
git clone https://github.com/YOUR_USERNAME/Real-Time-chatbox.git
cd Real-Time-chatbox
```

### 2️⃣ Install Dependencies
```bash
npm install
```

### 3️⃣ Create Configuration File
Create a `.env` file in the root of the project:
```
PORT=3000
NODE_ENV=development
FRONTEND_URL=http://localhost:3000
MONGODB_URI=mongodb://127.0.0.1:27017/chatapp
```

### 4️⃣ Start the Server
```bash
npm start
```

✅ Open `http://localhost:3000` in your browser and start chatting! 💬

## 🌍 Deployment to Render

### Prerequisites

1. A [Render.com](https://render.com) account
2. A [MongoDB Atlas](https://www.mongodb.com/atlas/database) free cluster for database

### Setting up MongoDB Atlas

1. Create a MongoDB Atlas account and log in
2. Create a new free cluster (M0)
3. Under Security > Database Access, create a database user with read/write permissions
4. Under Security > Network Access, add your IP to the list (or use 0.0.0.0/0 for all IPs)
5. Under Databases > Connect, choose "Connect your application" and copy the connection string
6. Replace `<password>` with your database user's password in the connection string

### Deploying to Render (One-Click Method)

1. Fork this repository to your GitHub account
2. Click the button below to deploy:

[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy)

3. Connect your GitHub account to Render
4. Add the required environment variables:
   - `NODE_ENV`: `production`
   - `MONGODB_URI`: Your MongoDB Atlas connection string
   - `SESSION_SECRET`: Generate a random string
   - `NODE_OPTIONS`: `--max_old_space_size=512`

### Manual Deployment to Render

1. Log in to your [Render Dashboard](https://dashboard.render.com/)
2. Click "New" and select "Web Service"
3. Connect your GitHub repository
4. Configure the service:
   - **Name**: `real-time-chatbox` (or any name you prefer)
   - **Environment**: `Node`
   - **Build Command**: `npm install`
   - **Start Command**: `npm start`
   - **Plan**: Free
5. Add the environment variables:
   - `NODE_ENV`: `production`
   - `MONGODB_URI`: Your MongoDB Atlas connection string
   - `SESSION_SECRET`: Generate a random string
   - `NODE_OPTIONS`: `--max_old_space_size=512`
6. Click "Create Web Service"

The deployment will take a few minutes. Once completed, your chat application will be available at the URL provided by Render.

### Important Notes About Free Tier

- The free tier instance will sleep after 15 minutes of inactivity
- The application includes an anti-sleep mechanism to prevent this when users are active
- To minimize cold starts, visit your app regularly or set up a monitoring service
- Free tier has 512MB RAM limit, the app is optimized to work within this constraint

## 🛠️ Tech Stack

- 🚀 **Node.js** – Backend
- ⚡ **Express.js** – Server Framework
- 💾 **MongoDB** – Database
- 🔄 **Socket.IO** – Real-time Communication
- 🔒 **AES-256-GCM** – Message Encryption
- ⚙️ **Redis** (optional) – Session Store & Socket.IO Adapter

## 📋 Environment Variables

| Variable | Description | Example |
|----------|-------------|---------|
| `NODE_ENV` | Environment setting | `production` or `development` |
| `PORT` | Port number | `10000` |
| `MONGODB_URI` | MongoDB connection URL | `mongodb+srv://...` |
| `SESSION_SECRET` | Secret for session cookies | Random string |
| `ADMIN_API_KEY` | Key for admin API access | Random string |
| `MAX_FILE_SIZE` | Maximum file upload size (bytes) | `15728640` (15MB) |
| `ALLOWED_FILE_TYPES` | Comma-separated list of file extensions | `jpeg,jpg,png,gif,mp4,webm,pdf` |
| `MESSAGE_CACHE_SIZE` | Number of messages to cache | `50` |

## 📊 Architecture Diagram

```mermaid
graph TD;
    User1["User 1"] -->|"Messages"| Server["Server (Node.js)"];
    User2["User 2"] -->|"Messages"| Server;
    Server -->|"Broadcast"| User1;
    Server -->|"Broadcast"| User2;
    Server -->|"Store"| Database["MongoDB"];
    Server -->|"Cache"| Redis["Redis (optional)"];
    Server -.->|"Hosted on"| Render["Render.com"];
```

## 📝 License

MIT
